#!/usr/bin/env python
"""
this is a mock version of runcry17,
which compares an input file to a hash and writes an appropriate outputfile st stdoout

to add find hashkeys:

input_path = 'path/to/input.d12'
with open(input_path, "rb") as f:
    hashkey = hashlib.md5(f.read()).digest()
hashkey

"""
import hashlib
import os
import sys
from shutil import copyfile

import aiida_gulp.tests as tests

stdoutfiles = {
    'ec39b0c69c6ef97d2a701f86054702ee': None,
    '57649b5ce90996cd71e233e2509068b7': None
}

additional_files = {
    'ec39b0c69c6ef97d2a701f86054702ee': [("opt_reaxff_pyrite.gout", ".gout"),
                                         ("opt_reaxff_pyrite.cif", ".cif")],
    '57649b5ce90996cd71e233e2509068b7': [("single_reaxff_pyrite.gout",
                                          ".gout")]
}

if __name__ == "__main__":

    # script_path = os.path.dirname(os.path.realpath(__file__))
    test_path = os.path.dirname(tests.__file__)
    # gulp requires input file name without extension as first arg
    input_name = sys.argv[1]

    with open(input_name + ".gin", "rb") as f:
        incontent = f.read()
        hashkey = hashlib.md5(incontent).hexdigest()

    if hashkey not in stdoutfiles:
        raise IOError("contents of {0} not in hash list, hashkey:\n{1}".format(
            os.path.basename(input_name + ".gin"), hashkey))

    for inname, outext in additional_files.get(hashkey, []):
        src = os.path.join(test_path, "output_files", inname)
        dst = os.path.join(".", input_name + outext)
        copyfile(src, dst)

    if stdoutfiles[hashkey] is None:
        sys.stdout.write(
            "running mock runcry17 for input arg: {}".format(input_name))
    else:
        outpath = os.path.join(test_path, "output_files", stdoutfiles[hashkey])
        with open(outpath) as f:
            sys.stdout.write(f.read())
