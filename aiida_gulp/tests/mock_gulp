#!/usr/bin/env python
"""
this is a mock version of runcry17,
which compares an input file to a hash and writes an appropriate outputfile st stdoout

to add find hashkeys:

input_path = 'path/to/input.d12'
with open(input_path, "rb") as f:
    hashkey = hashlib.md5(f.read()).digest()
hashkey

"""
import hashlib
import os
import sys
from shutil import copyfile

import aiida_crystal17.tests as tests

stdoutfiles = {
    '\xdfE\xb8k\xadm\xeb\xc4D\xc4\xb6\x92\x8cAj\xcd': None,
    '\xa9G\xa2b8\x9a\xd9\xb8\xcf\x1d4i\xbd(\xc3\xe2': None
}

additional_files = {
    '\xdfE\xb8k\xadm\xeb\xc4D\xc4\xb6\x92\x8cAj\xcd': [
        ("opt_reaxff_pyrite.gout", ".gout"),
        ("opt_reaxff_pyrite.cif", ".cif")
    ],
    '\xa9G\xa2b8\x9a\xd9\xb8\xcf\x1d4i\xbd(\xc3\xe2': [
        ("single_reaxff_pyrite.gout", ".gout")
    ]
}

if __name__ == "__main__":

    # script_path = os.path.dirname(os.path.realpath(__file__))
    test_path = os.path.dirname(tests.__file__)
    # gulp requires input file name without extension as first arg
    input_name = sys.argv[1]

    with open(input_name + ".gin", "rb") as f:
        incontent = f.read()
        hashkey = hashlib.md5(incontent).digest()

    if hashkey not in stdoutfiles:
        raise IOError("contents of {0} not in hash list, content:\n{1}".format(
            os.path.basename(input_name + ".gin"), incontent))

    for inname, outext in additional_files.get(hashkey, []):
        src = os.path.join(test_path, "output_files", inname)
        dst = os.path.join(".", input_name + outext)
        copyfile(src, dst)

    if stdoutfiles[hashkey] is None:
        sys.stdout.write(
            "running mock runcry17 for input arg: {}".format(input_name))
    else:
        outpath = os.path.join(test_path, "output_files", stdoutfiles[hashkey])
        with open(outpath) as f:
            sys.stdout.write(f.read())
